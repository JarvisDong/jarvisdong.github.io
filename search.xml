<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[简单的Terminal美化流程]]></title>
    <url>%2F2019%2F03%2F25%2Fterminal%2F</url>
    <content type="text"><![CDATA[前言作为一个程序员，terminal是我们经常使用的工具，有没有想过原生的terminal界面过于单调，功能太少，不妨试试给它充个皮肤吧。 这是我的terminal，使用的是iterm2和ZShell并做了一些简单的美化。 MacOS原生的terminal并不能展示出过多的信息，我的terminal上不同的色块显示着git状态，执行时间，当前目录，如果可以，还可以添加更多色块以显示更多的信息。 ZshellZshell也是一种Unix Shell，它继承了bash的优点同时也以bash为基础做出了大量的拓展。安装Zshell，我们可以用brew一行命令搞定 1brew install zsh 关于homebrew， 它是MacOS上的一款包管理器 更多信息访问这里 装完Zshell后，并不着急开始使用，接下来安装Ohmyzsh OhmyzshOhmyzsh是一款开源框架，用于辅助配置Zshell。因为这个框架，使得ZShell的可玩性更高，比如我们接下来要给它装的皮肤，就是借助于Ohmyzsh框架。 安装Ohmyzsh，执行 1sh -c "$(curl -fsSL https://raw.github.com/robbyrussell/oh-my-zsh/master/tools/install.sh)" 执行完毕后，需要输入密码。 输入密码按下return后，shell就变成了ZShell。此时最左显示的绿色波浪线，意思是当前的home目录。这个简洁的界面其实为ohmyzsh默认的Zshell主题。 更多关于Ohmyzsh的信息，访问这里 Powerlevel9kPowerlevel9k是一款流行的开源的ZShell主题，它支持Ohmyzsh框架，安装很轻松，配置也很简单。用户可以通过编辑文本文件.zshrc来调配喜欢的主题。关于配置稍后再说，安装Powerlevel9k也很简单，brew两行命令就能搞定 123brew tap sambadevi/powerlevel9kbrew install powerlevel9k 命令执行完安装也就结束了，现在我们需要手动去激活powerlevel9k主题 使用你最喜欢的文本编辑器，打开位于home目录中的.zshrc文件，在第一行复制粘贴下面这一行 1source /usr/local/opt/powerlevel9k/powerlevel9k.zsh-theme 添加这一行 1export TERM=xterm-256color 并且注释掉这一行(开头加#) 1ZSH_THEME="robbyrussell" 保存文本，执行下列命令重新启动Zshell 1exec zsh 调配这个时候的安装工作就完成了，接下来就是根据个人喜好的调配这个主题，可以操作的地方：有，色块(segment)，segment上的字色，segment的背景色，segment上除了文字还可以添加小图标(glyph)，比如我的例子中的小时钟图标。 但是在搞美化工作之前，注意这个主题中的色块对字体有讲究，苹果原生的字体可能并不能很好的渲染，为了显示正常，我们通常需要安装带有”Powerline” glyphs的字体并在terminal app里使用它。 关于字体的详细信息，访问这里 我个人使用的是Nerd Font中的DejaVu Sans Mono Nerd Font Complete 1. 安装字体 点击这里下载字体文件； 解压zip包； 进入文件夹DejaVuSansMono； 双击文件DejaVu Sans Mono Nerd Font Complete.ttf; 点击安装即可。 2. 使用 打开terminal application按cmd+,进入设置界面 点进profile tab，选择Text子tab，点击更改按钮 选择DejaVu Sans Mono Nerd Font Complete 3. 色块(segment)​ 3.1 种类​ powerlevel9k中能添加和自定义的segment有很多: background_jobs - Indicator for background jobs. battery - Current battery status. context - Your username and host, conditionalized based on $USER and SSH status. date - System date. dir - Your current working directory. dir_writable - Displays a lock icon, if you do not have write permissions on the current folder. disk_usage - Disk usage of your current partition. history - The command number for the current line. host - Your current host name ip - Shows the current IP address. vpn_ip - Shows the current VPN IP address. public_ip - Shows your public IP address. load - Your machine’s load averages. os_icon - Display a nice little icon, depending on your operating system. ram - Show free RAM. root_indicator - An indicator if the user has superuser status. status - The return code of the previous command. swap - Prints the current swap size. time - System time. user - Your current username vi_mode- Your prompt’s Vi editing mode (NORMAL|INSERT). ssh - Indicates whether or not you are in an SSH session. vcs - Information about this git or hg repository (if you are in one). 3.2 如何添加 再一次使用你最喜欢的文本编辑器，打开位于home目录中的.zshrc文件，从现在起，所有的调配的工作都需要通过编辑这个文本文件进行 写入这两行 12POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=()POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=() ​ 变量中的left prompt和right prompt指的是左边的segment和右边的segment ​ 其中括号内填写你想要的segments，单空格隔开。比如我的例子 12POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(status root_indicator dir vcs)POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(time) 3.3 自定义 多数种类的segment支持更多自定义，可以点击上面的segment名查看有哪些自定义选择，比如，系统时间time ，你可以修改它的format 1POWERLEVEL9K_TIME_FORMAT='%D&#123;%S:%M:%H&#125;' 多数segment都支持修改背景色与字色 12POWERLEVEL9K_TIME_BACKGROUND='033' #segment背景色POWERLEVEL9K_TIME_FOREGROUND='231' #segment字色 其中TIME可替换为想要自定义的segment，例如dir(注意全大写)，单引号中的数字为256 color，可以执行 1curl -s https://gist.githubusercontent.com/HaleTom/89ffe32783f89f403bba96bd7bcd1263/raw/ | bash 查看想要的颜色 编辑完成后，保存.zshrc，重启terminal就能看到变化了。]]></content>
      <tags>
        <tag>计算机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[第一篇]]></title>
    <url>%2F2019%2F03%2F03%2Ffirst_blog%2F</url>
    <content type="text"><![CDATA[为什么开博客​ 我的大学室友曾经建议过我写博客，他说程序员都写博客，仔细一想好像是这么一会儿事，但是我一直没有采取行动，一来本萌新什么都不懂，写什么呢；二来我觉得花时间码一堆没什么人看的字实属无意义。后来我想到，不对啊，为什么一定要写技术方面的文章，我可以写点别的啊，于是就有了这第一篇博客。 “教” 亦是“学”​ 在我的中学和本科的学习过程中，我认识到了一个事实。每当我向他人讲解知识时，在讲解之前，我大脑思路还算清晰；在讲解过程中，除非是我掌握得很透彻，否则我自己都讲不清；在讲解结束后，我自己再次思考我说出来的话，都会在这方面的知识加深一点新的理解。 ​ 所以，写博客可以给我带来更好的思考。我认识了什么，看到了什么，猜到了什么，写给你们看，或者只有我自己站在外人的角度看，如果观众能够看得明明白白，认为文字描述得清清楚楚，那便是我的收益。如果你们没有看懂，或者我在写的过程中发现自己没有理解通透，那也会激励着我去持续学习和思考。 “交流”​ 至于我所表达的观点是否和观众的价值观冲突，提出的理论是否客观正确，那便是写博客带来的第二个好处了，交流。事实上，在这个时代，聊天很容易，但交流是奢侈品。我不知道你们有没有一种感受，哪怕我和一个人朝夕相处，微信一天聊几十页，也才能渐渐互相了解彼此的大致想法，这是一个相当漫长的过程。更操蛋的是，当你需要，或者，想，和另一个陌生人表达时，这个效率极低的过程又得从头来一次。对于读者，读一篇博客，仿佛如同和作者一番长谈，观点碰撞，即使是素未谋面的人，也想和他聊个热火朝天。对于作者，写一篇叙述详尽的博客，能省去重复赘述的时间。 “朋友圈”​ 我曾经觉得博客是个已经淘汰的互联网文化，微博微信才是新时代的产物，这年头谁还用博客啊。然而事实上，“双微”让我认识了新鲜事物，朋友们展现自我，分享日常生活，但是久而久之我也厌倦了。首先多数人“双微”发出来的内容过于浅显，倒不是朋友们不思考，因为字数太少不够表达；多数人在做的无非就是1. 抱怨和自我鼓励 2. 秀晒炫 3.分享与广告。这些倒没什么问题，我每天看着也乐呵呵，可是我还是觉得少了点什么。说实话，我是很想交朋友的，可是当我发现翻一个人的朋友圈好几年的记录都不觉得我对这个人有所了解，他对事物的认知，他对生命的理解，他的爱好具体是什么样子的，魅力在哪，这些都没有。当然料想别人看我也如此，朋友能从我图片上面的只言片语了解我吗？显然不能。所以，我想也许可以用这种传统的被微博淘汰了的博客和你们交个朋友 :P。 比如你此时此刻读到这，应该明白了我对交流这件事的看法。你知道我的看法，才能以此为参考去评估我的为人，不是看我喝了什么奶茶在哪和谁吃了顿火锅。 建议你也写写看​ 书写的好处有很多，没有特别明显的坏处。对于写的人，博客不仅能带来认知，也可以给你带来反思；对于读的人，博客可以带来更高效深入的交流。我以前总是担心我的观点会被人认为是没有价值的， 或者是漏洞百出想法幼稚的，我现在的想法是，只要我写出来，它对我就有价值。我也很希望，我认识的朋友也能留下一篇篇有价值的长篇文章，你们也多多自我表达，展现真正的自我，那种不停于表面的自我，或许你会因此结识更多的人，打开且连通了一扇扇新世界的大门。 后记本文发表于太平洋时间2019-03-03 6:08PM，博客刚刚搭建起来，暂无评论功能，以后会做出来的。]]></content>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
</search>
